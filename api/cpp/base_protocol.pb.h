// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_protocol.proto

#ifndef PROTOBUF_base_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_base_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_base_5fprotocol_2eproto();
void protobuf_AssignDesc_base_5fprotocol_2eproto();
void protobuf_ShutdownFile_base_5fprotocol_2eproto();

class KeepUsingReq;
class SubscribeReq;
class SubscribeBrokerRsp;
class SubscribeAgentRsp;
class PushServiceConfigReq;
class PullServiceConfigReq;
class PullServiceConfigRsp;

// ===================================================================

class KeepUsingReq : public ::google::protobuf::Message {
 public:
  KeepUsingReq();
  virtual ~KeepUsingReq();

  KeepUsingReq(const KeepUsingReq& from);

  inline KeepUsingReq& operator=(const KeepUsingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepUsingReq& default_instance();

  void Swap(KeepUsingReq* other);

  // implements Message ----------------------------------------------

  KeepUsingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepUsingReq& from);
  void MergeFrom(const KeepUsingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceKey = 1;
  inline bool has_servicekey() const;
  inline void clear_servicekey();
  static const int kServiceKeyFieldNumber = 1;
  inline const ::std::string& servicekey() const;
  inline void set_servicekey(const ::std::string& value);
  inline void set_servicekey(const char* value);
  inline void set_servicekey(const char* value, size_t size);
  inline ::std::string* mutable_servicekey();
  inline ::std::string* release_servicekey();
  inline void set_allocated_servicekey(::std::string* servicekey);

  // @@protoc_insertion_point(class_scope:protocol.KeepUsingReq)
 private:
  inline void set_has_servicekey();
  inline void clear_has_servicekey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servicekey_;
  friend void  protobuf_AddDesc_base_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_base_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_base_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static KeepUsingReq* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeReq : public ::google::protobuf::Message {
 public:
  SubscribeReq();
  virtual ~SubscribeReq();

  SubscribeReq(const SubscribeReq& from);

  inline SubscribeReq& operator=(const SubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeReq& default_instance();

  void Swap(SubscribeReq* other);

  // implements Message ----------------------------------------------

  SubscribeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeReq& from);
  void MergeFrom(const SubscribeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceKey = 1;
  inline bool has_servicekey() const;
  inline void clear_servicekey();
  static const int kServiceKeyFieldNumber = 1;
  inline const ::std::string& servicekey() const;
  inline void set_servicekey(const ::std::string& value);
  inline void set_servicekey(const char* value);
  inline void set_servicekey(const char* value, size_t size);
  inline ::std::string* mutable_servicekey();
  inline ::std::string* release_servicekey();
  inline void set_allocated_servicekey(::std::string* servicekey);

  // @@protoc_insertion_point(class_scope:protocol.SubscribeReq)
 private:
  inline void set_has_servicekey();
  inline void clear_has_servicekey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servicekey_;
  friend void  protobuf_AddDesc_base_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_base_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_base_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static SubscribeReq* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeBrokerRsp : public ::google::protobuf::Message {
 public:
  SubscribeBrokerRsp();
  virtual ~SubscribeBrokerRsp();

  SubscribeBrokerRsp(const SubscribeBrokerRsp& from);

  inline SubscribeBrokerRsp& operator=(const SubscribeBrokerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeBrokerRsp& default_instance();

  void Swap(SubscribeBrokerRsp* other);

  // implements Message ----------------------------------------------

  SubscribeBrokerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeBrokerRsp& from);
  void MergeFrom(const SubscribeBrokerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceKey = 1;
  inline bool has_servicekey() const;
  inline void clear_servicekey();
  static const int kServiceKeyFieldNumber = 1;
  inline const ::std::string& servicekey() const;
  inline void set_servicekey(const ::std::string& value);
  inline void set_servicekey(const char* value);
  inline void set_servicekey(const char* value, size_t size);
  inline ::std::string* mutable_servicekey();
  inline ::std::string* release_servicekey();
  inline void set_allocated_servicekey(::std::string* servicekey);

  // required int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated string confKeys = 4;
  inline int confkeys_size() const;
  inline void clear_confkeys();
  static const int kConfKeysFieldNumber = 4;
  inline const ::std::string& confkeys(int index) const;
  inline ::std::string* mutable_confkeys(int index);
  inline void set_confkeys(int index, const ::std::string& value);
  inline void set_confkeys(int index, const char* value);
  inline void set_confkeys(int index, const char* value, size_t size);
  inline ::std::string* add_confkeys();
  inline void add_confkeys(const ::std::string& value);
  inline void add_confkeys(const char* value);
  inline void add_confkeys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& confkeys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_confkeys();

  // repeated string values = 5;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 5;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // optional string error = 6;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 6;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:protocol.SubscribeBrokerRsp)
 private:
  inline void set_has_servicekey();
  inline void clear_has_servicekey();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servicekey_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::RepeatedPtrField< ::std::string> confkeys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::std::string* error_;
  friend void  protobuf_AddDesc_base_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_base_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_base_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static SubscribeBrokerRsp* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeAgentRsp : public ::google::protobuf::Message {
 public:
  SubscribeAgentRsp();
  virtual ~SubscribeAgentRsp();

  SubscribeAgentRsp(const SubscribeAgentRsp& from);

  inline SubscribeAgentRsp& operator=(const SubscribeAgentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeAgentRsp& default_instance();

  void Swap(SubscribeAgentRsp* other);

  // implements Message ----------------------------------------------

  SubscribeAgentRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeAgentRsp& from);
  void MergeFrom(const SubscribeAgentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceKey = 1;
  inline bool has_servicekey() const;
  inline void clear_servicekey();
  static const int kServiceKeyFieldNumber = 1;
  inline const ::std::string& servicekey() const;
  inline void set_servicekey(const ::std::string& value);
  inline void set_servicekey(const char* value);
  inline void set_servicekey(const char* value, size_t size);
  inline ::std::string* mutable_servicekey();
  inline ::std::string* release_servicekey();
  inline void set_allocated_servicekey(::std::string* servicekey);

  // required int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SubscribeAgentRsp)
 private:
  inline void set_has_servicekey();
  inline void clear_has_servicekey();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servicekey_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_base_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_base_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_base_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static SubscribeAgentRsp* default_instance_;
};
// -------------------------------------------------------------------

class PushServiceConfigReq : public ::google::protobuf::Message {
 public:
  PushServiceConfigReq();
  virtual ~PushServiceConfigReq();

  PushServiceConfigReq(const PushServiceConfigReq& from);

  inline PushServiceConfigReq& operator=(const PushServiceConfigReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushServiceConfigReq& default_instance();

  void Swap(PushServiceConfigReq* other);

  // implements Message ----------------------------------------------

  PushServiceConfigReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushServiceConfigReq& from);
  void MergeFrom(const PushServiceConfigReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceKey = 1;
  inline bool has_servicekey() const;
  inline void clear_servicekey();
  static const int kServiceKeyFieldNumber = 1;
  inline const ::std::string& servicekey() const;
  inline void set_servicekey(const ::std::string& value);
  inline void set_servicekey(const char* value);
  inline void set_servicekey(const char* value, size_t size);
  inline ::std::string* mutable_servicekey();
  inline ::std::string* release_servicekey();
  inline void set_allocated_servicekey(::std::string* servicekey);

  // required uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated string confKeys = 3;
  inline int confkeys_size() const;
  inline void clear_confkeys();
  static const int kConfKeysFieldNumber = 3;
  inline const ::std::string& confkeys(int index) const;
  inline ::std::string* mutable_confkeys(int index);
  inline void set_confkeys(int index, const ::std::string& value);
  inline void set_confkeys(int index, const char* value);
  inline void set_confkeys(int index, const char* value, size_t size);
  inline ::std::string* add_confkeys();
  inline void add_confkeys(const ::std::string& value);
  inline void add_confkeys(const char* value);
  inline void add_confkeys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& confkeys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_confkeys();

  // repeated string values = 4;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 4;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:protocol.PushServiceConfigReq)
 private:
  inline void set_has_servicekey();
  inline void clear_has_servicekey();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servicekey_;
  ::google::protobuf::RepeatedPtrField< ::std::string> confkeys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_base_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_base_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_base_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PushServiceConfigReq* default_instance_;
};
// -------------------------------------------------------------------

class PullServiceConfigReq : public ::google::protobuf::Message {
 public:
  PullServiceConfigReq();
  virtual ~PullServiceConfigReq();

  PullServiceConfigReq(const PullServiceConfigReq& from);

  inline PullServiceConfigReq& operator=(const PullServiceConfigReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PullServiceConfigReq& default_instance();

  void Swap(PullServiceConfigReq* other);

  // implements Message ----------------------------------------------

  PullServiceConfigReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PullServiceConfigReq& from);
  void MergeFrom(const PullServiceConfigReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceKey = 1;
  inline bool has_servicekey() const;
  inline void clear_servicekey();
  static const int kServiceKeyFieldNumber = 1;
  inline const ::std::string& servicekey() const;
  inline void set_servicekey(const ::std::string& value);
  inline void set_servicekey(const char* value);
  inline void set_servicekey(const char* value, size_t size);
  inline ::std::string* mutable_servicekey();
  inline ::std::string* release_servicekey();
  inline void set_allocated_servicekey(::std::string* servicekey);

  // required uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.PullServiceConfigReq)
 private:
  inline void set_has_servicekey();
  inline void clear_has_servicekey();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servicekey_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_base_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_base_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_base_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PullServiceConfigReq* default_instance_;
};
// -------------------------------------------------------------------

class PullServiceConfigRsp : public ::google::protobuf::Message {
 public:
  PullServiceConfigRsp();
  virtual ~PullServiceConfigRsp();

  PullServiceConfigRsp(const PullServiceConfigRsp& from);

  inline PullServiceConfigRsp& operator=(const PullServiceConfigRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PullServiceConfigRsp& default_instance();

  void Swap(PullServiceConfigRsp* other);

  // implements Message ----------------------------------------------

  PullServiceConfigRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PullServiceConfigRsp& from);
  void MergeFrom(const PullServiceConfigRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceKey = 1;
  inline bool has_servicekey() const;
  inline void clear_servicekey();
  static const int kServiceKeyFieldNumber = 1;
  inline const ::std::string& servicekey() const;
  inline void set_servicekey(const ::std::string& value);
  inline void set_servicekey(const char* value);
  inline void set_servicekey(const char* value, size_t size);
  inline ::std::string* mutable_servicekey();
  inline ::std::string* release_servicekey();
  inline void set_allocated_servicekey(::std::string* servicekey);

  // required uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated string confKeys = 3;
  inline int confkeys_size() const;
  inline void clear_confkeys();
  static const int kConfKeysFieldNumber = 3;
  inline const ::std::string& confkeys(int index) const;
  inline ::std::string* mutable_confkeys(int index);
  inline void set_confkeys(int index, const ::std::string& value);
  inline void set_confkeys(int index, const char* value);
  inline void set_confkeys(int index, const char* value, size_t size);
  inline ::std::string* add_confkeys();
  inline void add_confkeys(const ::std::string& value);
  inline void add_confkeys(const char* value);
  inline void add_confkeys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& confkeys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_confkeys();

  // repeated string values = 4;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 4;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:protocol.PullServiceConfigRsp)
 private:
  inline void set_has_servicekey();
  inline void clear_has_servicekey();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* servicekey_;
  ::google::protobuf::RepeatedPtrField< ::std::string> confkeys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_base_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_base_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_base_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PullServiceConfigRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// KeepUsingReq

// required string serviceKey = 1;
inline bool KeepUsingReq::has_servicekey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepUsingReq::set_has_servicekey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepUsingReq::clear_has_servicekey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepUsingReq::clear_servicekey() {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_->clear();
  }
  clear_has_servicekey();
}
inline const ::std::string& KeepUsingReq::servicekey() const {
  // @@protoc_insertion_point(field_get:protocol.KeepUsingReq.serviceKey)
  return *servicekey_;
}
inline void KeepUsingReq::set_servicekey(const ::std::string& value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.KeepUsingReq.serviceKey)
}
inline void KeepUsingReq::set_servicekey(const char* value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.KeepUsingReq.serviceKey)
}
inline void KeepUsingReq::set_servicekey(const char* value, size_t size) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.KeepUsingReq.serviceKey)
}
inline ::std::string* KeepUsingReq::mutable_servicekey() {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.KeepUsingReq.serviceKey)
  return servicekey_;
}
inline ::std::string* KeepUsingReq::release_servicekey() {
  clear_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicekey_;
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeepUsingReq::set_allocated_servicekey(::std::string* servicekey) {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicekey_;
  }
  if (servicekey) {
    set_has_servicekey();
    servicekey_ = servicekey;
  } else {
    clear_has_servicekey();
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.KeepUsingReq.serviceKey)
}

// -------------------------------------------------------------------

// SubscribeReq

// required string serviceKey = 1;
inline bool SubscribeReq::has_servicekey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeReq::set_has_servicekey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeReq::clear_has_servicekey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeReq::clear_servicekey() {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_->clear();
  }
  clear_has_servicekey();
}
inline const ::std::string& SubscribeReq::servicekey() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeReq.serviceKey)
  return *servicekey_;
}
inline void SubscribeReq::set_servicekey(const ::std::string& value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.SubscribeReq.serviceKey)
}
inline void SubscribeReq::set_servicekey(const char* value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.SubscribeReq.serviceKey)
}
inline void SubscribeReq::set_servicekey(const char* value, size_t size) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.SubscribeReq.serviceKey)
}
inline ::std::string* SubscribeReq::mutable_servicekey() {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.SubscribeReq.serviceKey)
  return servicekey_;
}
inline ::std::string* SubscribeReq::release_servicekey() {
  clear_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicekey_;
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubscribeReq::set_allocated_servicekey(::std::string* servicekey) {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicekey_;
  }
  if (servicekey) {
    set_has_servicekey();
    servicekey_ = servicekey;
  } else {
    clear_has_servicekey();
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.SubscribeReq.serviceKey)
}

// -------------------------------------------------------------------

// SubscribeBrokerRsp

// required string serviceKey = 1;
inline bool SubscribeBrokerRsp::has_servicekey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeBrokerRsp::set_has_servicekey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeBrokerRsp::clear_has_servicekey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeBrokerRsp::clear_servicekey() {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_->clear();
  }
  clear_has_servicekey();
}
inline const ::std::string& SubscribeBrokerRsp::servicekey() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeBrokerRsp.serviceKey)
  return *servicekey_;
}
inline void SubscribeBrokerRsp::set_servicekey(const ::std::string& value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.SubscribeBrokerRsp.serviceKey)
}
inline void SubscribeBrokerRsp::set_servicekey(const char* value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.SubscribeBrokerRsp.serviceKey)
}
inline void SubscribeBrokerRsp::set_servicekey(const char* value, size_t size) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.SubscribeBrokerRsp.serviceKey)
}
inline ::std::string* SubscribeBrokerRsp::mutable_servicekey() {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.SubscribeBrokerRsp.serviceKey)
  return servicekey_;
}
inline ::std::string* SubscribeBrokerRsp::release_servicekey() {
  clear_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicekey_;
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubscribeBrokerRsp::set_allocated_servicekey(::std::string* servicekey) {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicekey_;
  }
  if (servicekey) {
    set_has_servicekey();
    servicekey_ = servicekey;
  } else {
    clear_has_servicekey();
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.SubscribeBrokerRsp.serviceKey)
}

// required int32 code = 2;
inline bool SubscribeBrokerRsp::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeBrokerRsp::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeBrokerRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeBrokerRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 SubscribeBrokerRsp::code() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeBrokerRsp.code)
  return code_;
}
inline void SubscribeBrokerRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:protocol.SubscribeBrokerRsp.code)
}

// required uint32 version = 3;
inline bool SubscribeBrokerRsp::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubscribeBrokerRsp::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubscribeBrokerRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubscribeBrokerRsp::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SubscribeBrokerRsp::version() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeBrokerRsp.version)
  return version_;
}
inline void SubscribeBrokerRsp::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.SubscribeBrokerRsp.version)
}

// repeated string confKeys = 4;
inline int SubscribeBrokerRsp::confkeys_size() const {
  return confkeys_.size();
}
inline void SubscribeBrokerRsp::clear_confkeys() {
  confkeys_.Clear();
}
inline const ::std::string& SubscribeBrokerRsp::confkeys(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeBrokerRsp.confKeys)
  return confkeys_.Get(index);
}
inline ::std::string* SubscribeBrokerRsp::mutable_confkeys(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SubscribeBrokerRsp.confKeys)
  return confkeys_.Mutable(index);
}
inline void SubscribeBrokerRsp::set_confkeys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.SubscribeBrokerRsp.confKeys)
  confkeys_.Mutable(index)->assign(value);
}
inline void SubscribeBrokerRsp::set_confkeys(int index, const char* value) {
  confkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.SubscribeBrokerRsp.confKeys)
}
inline void SubscribeBrokerRsp::set_confkeys(int index, const char* value, size_t size) {
  confkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.SubscribeBrokerRsp.confKeys)
}
inline ::std::string* SubscribeBrokerRsp::add_confkeys() {
  return confkeys_.Add();
}
inline void SubscribeBrokerRsp::add_confkeys(const ::std::string& value) {
  confkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.SubscribeBrokerRsp.confKeys)
}
inline void SubscribeBrokerRsp::add_confkeys(const char* value) {
  confkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.SubscribeBrokerRsp.confKeys)
}
inline void SubscribeBrokerRsp::add_confkeys(const char* value, size_t size) {
  confkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.SubscribeBrokerRsp.confKeys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeBrokerRsp::confkeys() const {
  // @@protoc_insertion_point(field_list:protocol.SubscribeBrokerRsp.confKeys)
  return confkeys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeBrokerRsp::mutable_confkeys() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SubscribeBrokerRsp.confKeys)
  return &confkeys_;
}

// repeated string values = 5;
inline int SubscribeBrokerRsp::values_size() const {
  return values_.size();
}
inline void SubscribeBrokerRsp::clear_values() {
  values_.Clear();
}
inline const ::std::string& SubscribeBrokerRsp::values(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeBrokerRsp.values)
  return values_.Get(index);
}
inline ::std::string* SubscribeBrokerRsp::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SubscribeBrokerRsp.values)
  return values_.Mutable(index);
}
inline void SubscribeBrokerRsp::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.SubscribeBrokerRsp.values)
  values_.Mutable(index)->assign(value);
}
inline void SubscribeBrokerRsp::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.SubscribeBrokerRsp.values)
}
inline void SubscribeBrokerRsp::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.SubscribeBrokerRsp.values)
}
inline ::std::string* SubscribeBrokerRsp::add_values() {
  return values_.Add();
}
inline void SubscribeBrokerRsp::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.SubscribeBrokerRsp.values)
}
inline void SubscribeBrokerRsp::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.SubscribeBrokerRsp.values)
}
inline void SubscribeBrokerRsp::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.SubscribeBrokerRsp.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeBrokerRsp::values() const {
  // @@protoc_insertion_point(field_list:protocol.SubscribeBrokerRsp.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeBrokerRsp::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SubscribeBrokerRsp.values)
  return &values_;
}

// optional string error = 6;
inline bool SubscribeBrokerRsp::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubscribeBrokerRsp::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubscribeBrokerRsp::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubscribeBrokerRsp::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& SubscribeBrokerRsp::error() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeBrokerRsp.error)
  return *error_;
}
inline void SubscribeBrokerRsp::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.SubscribeBrokerRsp.error)
}
inline void SubscribeBrokerRsp::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.SubscribeBrokerRsp.error)
}
inline void SubscribeBrokerRsp::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.SubscribeBrokerRsp.error)
}
inline ::std::string* SubscribeBrokerRsp::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.SubscribeBrokerRsp.error)
  return error_;
}
inline ::std::string* SubscribeBrokerRsp::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubscribeBrokerRsp::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.SubscribeBrokerRsp.error)
}

// -------------------------------------------------------------------

// SubscribeAgentRsp

// required string serviceKey = 1;
inline bool SubscribeAgentRsp::has_servicekey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeAgentRsp::set_has_servicekey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeAgentRsp::clear_has_servicekey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeAgentRsp::clear_servicekey() {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_->clear();
  }
  clear_has_servicekey();
}
inline const ::std::string& SubscribeAgentRsp::servicekey() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeAgentRsp.serviceKey)
  return *servicekey_;
}
inline void SubscribeAgentRsp::set_servicekey(const ::std::string& value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.SubscribeAgentRsp.serviceKey)
}
inline void SubscribeAgentRsp::set_servicekey(const char* value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.SubscribeAgentRsp.serviceKey)
}
inline void SubscribeAgentRsp::set_servicekey(const char* value, size_t size) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.SubscribeAgentRsp.serviceKey)
}
inline ::std::string* SubscribeAgentRsp::mutable_servicekey() {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.SubscribeAgentRsp.serviceKey)
  return servicekey_;
}
inline ::std::string* SubscribeAgentRsp::release_servicekey() {
  clear_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicekey_;
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubscribeAgentRsp::set_allocated_servicekey(::std::string* servicekey) {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicekey_;
  }
  if (servicekey) {
    set_has_servicekey();
    servicekey_ = servicekey;
  } else {
    clear_has_servicekey();
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.SubscribeAgentRsp.serviceKey)
}

// required int32 code = 2;
inline bool SubscribeAgentRsp::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeAgentRsp::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeAgentRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeAgentRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 SubscribeAgentRsp::code() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeAgentRsp.code)
  return code_;
}
inline void SubscribeAgentRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:protocol.SubscribeAgentRsp.code)
}

// optional uint32 index = 3;
inline bool SubscribeAgentRsp::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubscribeAgentRsp::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubscribeAgentRsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubscribeAgentRsp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 SubscribeAgentRsp::index() const {
  // @@protoc_insertion_point(field_get:protocol.SubscribeAgentRsp.index)
  return index_;
}
inline void SubscribeAgentRsp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:protocol.SubscribeAgentRsp.index)
}

// -------------------------------------------------------------------

// PushServiceConfigReq

// required string serviceKey = 1;
inline bool PushServiceConfigReq::has_servicekey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushServiceConfigReq::set_has_servicekey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushServiceConfigReq::clear_has_servicekey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushServiceConfigReq::clear_servicekey() {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_->clear();
  }
  clear_has_servicekey();
}
inline const ::std::string& PushServiceConfigReq::servicekey() const {
  // @@protoc_insertion_point(field_get:protocol.PushServiceConfigReq.serviceKey)
  return *servicekey_;
}
inline void PushServiceConfigReq::set_servicekey(const ::std::string& value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.PushServiceConfigReq.serviceKey)
}
inline void PushServiceConfigReq::set_servicekey(const char* value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PushServiceConfigReq.serviceKey)
}
inline void PushServiceConfigReq::set_servicekey(const char* value, size_t size) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PushServiceConfigReq.serviceKey)
}
inline ::std::string* PushServiceConfigReq::mutable_servicekey() {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PushServiceConfigReq.serviceKey)
  return servicekey_;
}
inline ::std::string* PushServiceConfigReq::release_servicekey() {
  clear_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicekey_;
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushServiceConfigReq::set_allocated_servicekey(::std::string* servicekey) {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicekey_;
  }
  if (servicekey) {
    set_has_servicekey();
    servicekey_ = servicekey;
  } else {
    clear_has_servicekey();
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PushServiceConfigReq.serviceKey)
}

// required uint32 version = 2;
inline bool PushServiceConfigReq::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushServiceConfigReq::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushServiceConfigReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushServiceConfigReq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PushServiceConfigReq::version() const {
  // @@protoc_insertion_point(field_get:protocol.PushServiceConfigReq.version)
  return version_;
}
inline void PushServiceConfigReq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.PushServiceConfigReq.version)
}

// repeated string confKeys = 3;
inline int PushServiceConfigReq::confkeys_size() const {
  return confkeys_.size();
}
inline void PushServiceConfigReq::clear_confkeys() {
  confkeys_.Clear();
}
inline const ::std::string& PushServiceConfigReq::confkeys(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PushServiceConfigReq.confKeys)
  return confkeys_.Get(index);
}
inline ::std::string* PushServiceConfigReq::mutable_confkeys(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PushServiceConfigReq.confKeys)
  return confkeys_.Mutable(index);
}
inline void PushServiceConfigReq::set_confkeys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.PushServiceConfigReq.confKeys)
  confkeys_.Mutable(index)->assign(value);
}
inline void PushServiceConfigReq::set_confkeys(int index, const char* value) {
  confkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PushServiceConfigReq.confKeys)
}
inline void PushServiceConfigReq::set_confkeys(int index, const char* value, size_t size) {
  confkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PushServiceConfigReq.confKeys)
}
inline ::std::string* PushServiceConfigReq::add_confkeys() {
  return confkeys_.Add();
}
inline void PushServiceConfigReq::add_confkeys(const ::std::string& value) {
  confkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.PushServiceConfigReq.confKeys)
}
inline void PushServiceConfigReq::add_confkeys(const char* value) {
  confkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.PushServiceConfigReq.confKeys)
}
inline void PushServiceConfigReq::add_confkeys(const char* value, size_t size) {
  confkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.PushServiceConfigReq.confKeys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PushServiceConfigReq::confkeys() const {
  // @@protoc_insertion_point(field_list:protocol.PushServiceConfigReq.confKeys)
  return confkeys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PushServiceConfigReq::mutable_confkeys() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PushServiceConfigReq.confKeys)
  return &confkeys_;
}

// repeated string values = 4;
inline int PushServiceConfigReq::values_size() const {
  return values_.size();
}
inline void PushServiceConfigReq::clear_values() {
  values_.Clear();
}
inline const ::std::string& PushServiceConfigReq::values(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PushServiceConfigReq.values)
  return values_.Get(index);
}
inline ::std::string* PushServiceConfigReq::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PushServiceConfigReq.values)
  return values_.Mutable(index);
}
inline void PushServiceConfigReq::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.PushServiceConfigReq.values)
  values_.Mutable(index)->assign(value);
}
inline void PushServiceConfigReq::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PushServiceConfigReq.values)
}
inline void PushServiceConfigReq::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PushServiceConfigReq.values)
}
inline ::std::string* PushServiceConfigReq::add_values() {
  return values_.Add();
}
inline void PushServiceConfigReq::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.PushServiceConfigReq.values)
}
inline void PushServiceConfigReq::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.PushServiceConfigReq.values)
}
inline void PushServiceConfigReq::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.PushServiceConfigReq.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PushServiceConfigReq::values() const {
  // @@protoc_insertion_point(field_list:protocol.PushServiceConfigReq.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PushServiceConfigReq::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PushServiceConfigReq.values)
  return &values_;
}

// -------------------------------------------------------------------

// PullServiceConfigReq

// required string serviceKey = 1;
inline bool PullServiceConfigReq::has_servicekey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullServiceConfigReq::set_has_servicekey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullServiceConfigReq::clear_has_servicekey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullServiceConfigReq::clear_servicekey() {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_->clear();
  }
  clear_has_servicekey();
}
inline const ::std::string& PullServiceConfigReq::servicekey() const {
  // @@protoc_insertion_point(field_get:protocol.PullServiceConfigReq.serviceKey)
  return *servicekey_;
}
inline void PullServiceConfigReq::set_servicekey(const ::std::string& value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.PullServiceConfigReq.serviceKey)
}
inline void PullServiceConfigReq::set_servicekey(const char* value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PullServiceConfigReq.serviceKey)
}
inline void PullServiceConfigReq::set_servicekey(const char* value, size_t size) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PullServiceConfigReq.serviceKey)
}
inline ::std::string* PullServiceConfigReq::mutable_servicekey() {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PullServiceConfigReq.serviceKey)
  return servicekey_;
}
inline ::std::string* PullServiceConfigReq::release_servicekey() {
  clear_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicekey_;
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PullServiceConfigReq::set_allocated_servicekey(::std::string* servicekey) {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicekey_;
  }
  if (servicekey) {
    set_has_servicekey();
    servicekey_ = servicekey;
  } else {
    clear_has_servicekey();
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PullServiceConfigReq.serviceKey)
}

// required uint32 version = 2;
inline bool PullServiceConfigReq::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PullServiceConfigReq::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PullServiceConfigReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PullServiceConfigReq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PullServiceConfigReq::version() const {
  // @@protoc_insertion_point(field_get:protocol.PullServiceConfigReq.version)
  return version_;
}
inline void PullServiceConfigReq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.PullServiceConfigReq.version)
}

// -------------------------------------------------------------------

// PullServiceConfigRsp

// required string serviceKey = 1;
inline bool PullServiceConfigRsp::has_servicekey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullServiceConfigRsp::set_has_servicekey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullServiceConfigRsp::clear_has_servicekey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullServiceConfigRsp::clear_servicekey() {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_->clear();
  }
  clear_has_servicekey();
}
inline const ::std::string& PullServiceConfigRsp::servicekey() const {
  // @@protoc_insertion_point(field_get:protocol.PullServiceConfigRsp.serviceKey)
  return *servicekey_;
}
inline void PullServiceConfigRsp::set_servicekey(const ::std::string& value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.PullServiceConfigRsp.serviceKey)
}
inline void PullServiceConfigRsp::set_servicekey(const char* value) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PullServiceConfigRsp.serviceKey)
}
inline void PullServiceConfigRsp::set_servicekey(const char* value, size_t size) {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  servicekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PullServiceConfigRsp.serviceKey)
}
inline ::std::string* PullServiceConfigRsp::mutable_servicekey() {
  set_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PullServiceConfigRsp.serviceKey)
  return servicekey_;
}
inline ::std::string* PullServiceConfigRsp::release_servicekey() {
  clear_has_servicekey();
  if (servicekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicekey_;
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PullServiceConfigRsp::set_allocated_servicekey(::std::string* servicekey) {
  if (servicekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicekey_;
  }
  if (servicekey) {
    set_has_servicekey();
    servicekey_ = servicekey;
  } else {
    clear_has_servicekey();
    servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PullServiceConfigRsp.serviceKey)
}

// required uint32 version = 2;
inline bool PullServiceConfigRsp::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PullServiceConfigRsp::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PullServiceConfigRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PullServiceConfigRsp::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PullServiceConfigRsp::version() const {
  // @@protoc_insertion_point(field_get:protocol.PullServiceConfigRsp.version)
  return version_;
}
inline void PullServiceConfigRsp::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.PullServiceConfigRsp.version)
}

// repeated string confKeys = 3;
inline int PullServiceConfigRsp::confkeys_size() const {
  return confkeys_.size();
}
inline void PullServiceConfigRsp::clear_confkeys() {
  confkeys_.Clear();
}
inline const ::std::string& PullServiceConfigRsp::confkeys(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PullServiceConfigRsp.confKeys)
  return confkeys_.Get(index);
}
inline ::std::string* PullServiceConfigRsp::mutable_confkeys(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PullServiceConfigRsp.confKeys)
  return confkeys_.Mutable(index);
}
inline void PullServiceConfigRsp::set_confkeys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.PullServiceConfigRsp.confKeys)
  confkeys_.Mutable(index)->assign(value);
}
inline void PullServiceConfigRsp::set_confkeys(int index, const char* value) {
  confkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PullServiceConfigRsp.confKeys)
}
inline void PullServiceConfigRsp::set_confkeys(int index, const char* value, size_t size) {
  confkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PullServiceConfigRsp.confKeys)
}
inline ::std::string* PullServiceConfigRsp::add_confkeys() {
  return confkeys_.Add();
}
inline void PullServiceConfigRsp::add_confkeys(const ::std::string& value) {
  confkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.PullServiceConfigRsp.confKeys)
}
inline void PullServiceConfigRsp::add_confkeys(const char* value) {
  confkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.PullServiceConfigRsp.confKeys)
}
inline void PullServiceConfigRsp::add_confkeys(const char* value, size_t size) {
  confkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.PullServiceConfigRsp.confKeys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PullServiceConfigRsp::confkeys() const {
  // @@protoc_insertion_point(field_list:protocol.PullServiceConfigRsp.confKeys)
  return confkeys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PullServiceConfigRsp::mutable_confkeys() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PullServiceConfigRsp.confKeys)
  return &confkeys_;
}

// repeated string values = 4;
inline int PullServiceConfigRsp::values_size() const {
  return values_.size();
}
inline void PullServiceConfigRsp::clear_values() {
  values_.Clear();
}
inline const ::std::string& PullServiceConfigRsp::values(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PullServiceConfigRsp.values)
  return values_.Get(index);
}
inline ::std::string* PullServiceConfigRsp::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PullServiceConfigRsp.values)
  return values_.Mutable(index);
}
inline void PullServiceConfigRsp::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.PullServiceConfigRsp.values)
  values_.Mutable(index)->assign(value);
}
inline void PullServiceConfigRsp::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PullServiceConfigRsp.values)
}
inline void PullServiceConfigRsp::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PullServiceConfigRsp.values)
}
inline ::std::string* PullServiceConfigRsp::add_values() {
  return values_.Add();
}
inline void PullServiceConfigRsp::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.PullServiceConfigRsp.values)
}
inline void PullServiceConfigRsp::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.PullServiceConfigRsp.values)
}
inline void PullServiceConfigRsp::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.PullServiceConfigRsp.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PullServiceConfigRsp::values() const {
  // @@protoc_insertion_point(field_list:protocol.PullServiceConfigRsp.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PullServiceConfigRsp::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PullServiceConfigRsp.values)
  return &values_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_5fprotocol_2eproto__INCLUDED
